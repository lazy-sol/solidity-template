{
  "address": "0x7b581185b7912E45F882aE0B1512C32B8a96Dd3d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapterAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownableTargetAddress",
          "type": "address"
        }
      ],
      "name": "NewOwnableToAccessControlAdapterDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        }
      ],
      "name": "deployNewOwnableToAccessControlAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0632ff416ab98e2dd6af21d26f9e28c5b21d187557d8ec594d8734f3a7620a5f",
  "receipt": {
    "to": null,
    "from": "0x5F185Da55f7BBD9217E3b3CeE06b180721FA6d34",
    "contractAddress": "0x7b581185b7912E45F882aE0B1512C32B8a96Dd3d",
    "transactionIndex": 24,
    "gasUsed": "817257",
    "logsBloom": "0x
    "blockHash": "0x446d6bacf0e956a26aa2d58f30bc71e24ef679c7ab54d33bd044b2cb938ae08b",
    "transactionHash": "0x0632ff416ab98e2dd6af21d26f9e28c5b21d187557d8ec594d8734f3a7620a5f",
    "logs": [],
    "blockNumber": 9839388,
    "cumulativeGasUsed": "8436686",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f8f20c7b4fd0796d45c56d37e790191",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownableTargetAddress\",\"type\":\"address\"}],\"name\":\"NewOwnableToAccessControlAdapterDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"deployNewOwnableToAccessControlAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Basil Gorin\",\"events\":{\"NewOwnableToAccessControlAdapterDeployed(address,address)\":{\"details\":\"Fired in deployNewOwnableToAccessControlAdapter\",\"params\":{\"adapterAddress\":\"newly deployed OwnableToAccessControlAdapter address\",\"ownableTargetAddress\":\"OZ Ownable target contract address\"}}},\"kind\":\"dev\",\"methods\":{\"deployNewOwnableToAccessControlAdapter(address)\":{\"params\":{\"targetAddress\":\"OZ Ownable target address to bind OwnableToAccessControlAdapter to\"},\"returns\":{\"_0\":\"address of the newly deployed OwnableToAccessControlAdapter contract\"}}},\"title\":\"Adapter Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployNewOwnableToAccessControlAdapter(address)\":{\"notice\":\"Deploys new OwnableToAccessControlAdapter bound to the OZ Ownable contract specified.      Can be executed only by the OZ Ownable target owner. This owner is expected to transfer      the ownership to the newly deployed OwnableToAccessControlAdapter contract address.\"}},\"notice\":\"Helper contract simplifying the deployment of the OwnableToAccessControlAdapter\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdapterFactory.sol\":\"AdapterFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22; // require with message (0.4.22), pure/view modifiers (0.4.16), hardhat (0.4.11)\\n\\n/**\\n * @title Role-based Access Control (RBAC)\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice This contract is inherited by other contracts requiring the role-based access control (RBAC)\\n *      protection for the restricted access functions\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @author Basil Gorin\\n */\\nabstract contract AccessControl {\\n\\t/**\\n\\t * @dev Privileged addresses with defined roles/permissions\\n\\t * @dev In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t *\\n\\t * @dev We keep the mapping private to prevent direct writes to it from the inheriting\\n\\t *      contracts, `getRole()` and `updateRole()` functions should be used instead\\n\\t */\\n\\tmapping(address => uint256) private userRoles;\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param operator address which was granted/revoked permissions\\n\\t * @param requested permissions requested\\n\\t * @param assigned permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed operator, uint256 requested, uint256 assigned);\\n\\n\\t/**\\n\\t * @notice Function modifier making a function defined as public behave as restricted\\n\\t *      (so that only a pre-configured set of accounts can execute it)\\n\\t *\\n\\t * @param role the role transaction executor is required to have;\\n\\t *      the function throws an \\\"access denied\\\" exception if this condition is not met\\n\\t */\\n\\tmodifier restrictedTo(uint256 role) {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(role), \\\"access denied\\\");\\n\\n\\t\\t// execute the rest of the function\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates an access control instance, setting the contract owner to have full privileges\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tconstructor(address _owner) internal { // visibility modifier is required to be compilable with 0.6.x\\n\\t\\t// grant owner full privileges\\n\\t\\t__setRole(_owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address mapping of `userRoles`\\n\\t\\treturn getRole(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reads the permissions (role) for a given user from the `userRoles` mapping\\n\\t *      (privileged addresses with defined roles/permissions)\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Having a simple getter instead of making the mapping public\\n\\t *      allows enforcing the encapsulation of the mapping and protects from\\n\\t *      writing to it directly in the inheriting smart contracts\\n\\t *\\n\\t * @param operator address of a user to read permissions for,\\n\\t *      or self address to read global features of the smart contract\\n\\t */\\n\\tfunction getRole(address operator) public view returns(uint256) {\\n\\t\\t// read the value from `userRoles` and return\\n\\t\\treturn userRoles[operator];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\t__setRole(operator, role, evaluateBy(msg.sender, getRole(operator), role));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = getRole(operator);\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(getRole(operator), required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the `assignedRole` role to the operator, logs both `requestedRole` and `actualRole`\\n\\t *\\n\\t * @dev Unsafe:\\n\\t *      provides direct write access to `userRoles` mapping without any security checks,\\n\\t *      doesn't verify the executor (msg.sender) permissions,\\n\\t *      must be kept private at all times\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param requestedRole bitmask representing a set of permissions requested\\n\\t *      to be enabled/disabled for a user specified, used only to be logged into event\\n\\t * @param assignedRole bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified, used to update the mapping and to be logged into event\\n\\t */\\n\\tfunction __setRole(address operator, uint256 requestedRole, uint256 assignedRole) private {\\n\\t\\t// assign the role to the operator\\n\\t\\tuserRoles[operator] = assignedRole;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(operator, requestedRole, assignedRole);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) private pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf66d032e7c46ff4f5a61a7e963e8dea28ef667a0f6aa1d39b34c67e35e831198\",\"license\":\"MIT\"},\"contracts/AdapterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport \\\"./OwnableToAccessControlAdapter.sol\\\";\\n\\n/**\\n * @notice Ownable is a contract which is aware of its owner, that is has owner() function\\n */\\ninterface Ownable {\\n\\t/**\\n\\t * @notice Smart contract owner\\n\\t *\\n\\t * @return the address of the smart contract owner\\n\\t */\\n\\tfunction owner() external returns(address);\\n}\\n\\n/**\\n * @title Adapter Factory\\n *\\n * @notice Helper contract simplifying the deployment of the OwnableToAccessControlAdapter\\n *\\n * @author Basil Gorin\\n */\\ncontract AdapterFactory {\\n\\t/**\\n\\t * @dev Fired in deployNewOwnableToAccessControlAdapter\\n\\t *\\n\\t * @param adapterAddress newly deployed OwnableToAccessControlAdapter address\\n\\t * @param ownableTargetAddress OZ Ownable target contract address\\n\\t */\\n\\tevent NewOwnableToAccessControlAdapterDeployed(address indexed adapterAddress, address indexed ownableTargetAddress);\\n\\n\\t/**\\n\\t * @notice Deploys new OwnableToAccessControlAdapter bound to the OZ Ownable contract specified.\\n\\t *      Can be executed only by the OZ Ownable target owner. This owner is expected to transfer\\n\\t *      the ownership to the newly deployed OwnableToAccessControlAdapter contract address.\\n\\t *\\n\\t * @param targetAddress OZ Ownable target address to bind OwnableToAccessControlAdapter to\\n\\t * @return address of the newly deployed OwnableToAccessControlAdapter contract\\n\\t */\\n\\tfunction deployNewOwnableToAccessControlAdapter(address targetAddress) public returns(address) {\\n\\t\\t// verify sender is a target owner\\n\\t\\trequire(Ownable(targetAddress).owner() == msg.sender, \\\"not an owner\\\");\\n\\n\\t\\t// deploy the OwnableToAccessControlAdapter\\n\\t\\taddress adapterAddress = address(new OwnableToAccessControlAdapter(targetAddress, msg.sender));\\n\\n\\t\\t// emit an event\\n\\t\\temit NewOwnableToAccessControlAdapterDeployed(adapterAddress, targetAddress);\\n\\n\\t\\t// return address of the newly deployed OwnableToAccessControlAdapter contract\\n\\t\\treturn adapterAddress;\\n\\t}\\n}\\n\",\"keccak256\":\"0xc5da22ffbabe0416a4c9407cace60b1f2c0b5851d15c5e936eb886534983a774\",\"license\":\"MIT\"},\"contracts/OwnableToAccessControlAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2; // breaking changes in .call() (0.5.0), allow .call{}() (0.6.2)\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\n/**\\n * @title OZ Ownable to AccessControl Adapter (short: AccessControl Adapter)\\n *\\n * @notice Helper contract allowing to change the access model of the already deployed\\n *      OpenZeppelin Ownable contract to the AccessControl model\\n *\\n * @dev Installation Flow\\n *      Prerequisite: deployed OZ Ownable contract (target contract) address (target_address)\\n *\\n *      1. Deploy the AccessControl Adapter bound to the already deployed OZ Ownable contract\\n *         (specify the target OZ Ownable contract address in the constructor upon the deployment)\\n *\\n *            const adapter = await (artifacts.require(\\\"OwnableToAccessControlAdapter\\\")).new(target_address);\\n *\\n *      2. Define what Ownable-restricted public functions on the target contract you'd like to be able\\n *         to provide access to through the adapter contract\\n *\\n *      3. Map every such function with the role required to execute it using `updateAccessRole()` function\\n *         For example, to be able to provide an access to the transferOwnership(address) function, you could do\\n *\\n *            const ROLE_TRANSFER_OWNERSHIP_MANAGER = 0x00010000;\\n *            await adapter.updateAccessRole(\\\"transferOwnership(address)\\\", ROLE_TRANSFER_OWNERSHIP_MANAGER);\\n *\\n *      4. Provide the roles to the corresponding operators as you would usually do with AccessControl\\n *         For example, if you wish an address 0x00000000000000000000000000000000000Ff1CE to grant an access to the\\n *         transferOwnership(address) function on the target, you could do\\n *\\n *            const operator = \\\"0x00000000000000000000000000000000000Ff1CE\\\";\\n *            await adapter.updateRole(operator, ROLE_TRANSFER_OWNERSHIP_MANAGER);\\n *\\n *      5. Transfer the ownership of the target contract to the deployed AccessControl Adapter contract\\n *         Note that you can also do steps 2-4 after the step 5\\n *\\n * @dev Usage Flow\\n *      Prerequisite: installed AccessControl Adapter with the access to at least one restricted target contract\\n *      function configured\\n *\\n *      To execute the restricted access function on the target contract via the AccessControl Adapter\\n *      1. Use target contract ABI to construct a low-level function call calldata\\n *         For example, to construct the transferOwnership() function calldata to transfer the ownership to the\\n *         0x00000000000000000000000000000000DEAdc0De address, you could do\\n *\\n *            const to = \\\"0x00000000000000000000000000000000DEAdc0De\\\";\\n *            const calldata = target.contract.methods.transferOwnership(to).encodeABI();\\n *\\n *       2. Execute a low-level function call on the AccessControl Adapter contract using the constructed calldata\\n *          For example, to execute the transferOwnership() function (prepared in step 1), you could do\\n *\\n *            await web3.eth.sendTransaction({\\n *                from: operator,\\n *                to: adapter.address,\\n *                data: calldata,\\n *            }\\n *\\n *        3. It is also ok to add an ether to the transaction by adding a value field to the `sendTransaction` call,\\n *           as well as sending plain ether transfer transaction, as long as target contract has payable functions,\\n *           and/or has a default payable receiver\\n *\\n * @author Basil Gorin\\n */\\ncontract OwnableToAccessControlAdapter is AccessControl {\\n\\t/**\\n\\t * @dev Target OZ Ownable contract AccessControl Adapter executes the transactions on\\n\\t *\\n\\t * @dev Target contract must transfer its ownership to the AccessControl Adapter\\n\\t */\\n\\taddress public target;\\n\\n\\t/**\\n\\t * @dev Access roles mapping stores the roles required to access the functions on the\\n\\t *      target contract, guarding it from the unauthorized access\\n\\t *\\n\\t * @dev Maps function selector (bytes4) on the target contract to the access role (permission)\\n\\t *      required to execute the function\\n\\t */\\n\\tmapping(bytes4 => uint256) public accessRoles;\\n\\n\\t/**\\n\\t * @notice Access Roles manager is responsible for assigning the access roles to functions\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying `accessRoles` mapping\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_ROLES_MANAGER = 0x2000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Fired in `updateAccessRole` when the `accessRoles` mapping is updated\\n\\t *\\n\\t * @param selector selector of the function which corresponding access role was updated\\n\\t * @param role effective required role to execute the function defined by the selector\\n\\t */\\n\\tevent AccessRoleUpdated(bytes4 selector, uint256 role);\\n\\n\\t/**\\n\\t * @dev Logs function execution result on the target if the execution completed successfully\\n\\t *\\n\\t * @param selector selector of the function which was executed on the target contract\\n\\t * @param data full calldata payload passed to the target contract (includes the 4-bytes selector)\\n\\t * @param result execution response from the target contract\\n\\t */\\n\\tevent ExecutionComplete(bytes4 selector, bytes data, bytes result);\\n\\n\\t/**\\n\\t * @dev Deploys an AccessControl Adapter binding it to the target OZ Ownable contract,\\n\\t *      and setting the ownership of the adapter itself to the deployer\\n\\t *\\n\\t * @param _target target OZ Ownable contract address\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tconstructor(address _target, address _owner) public AccessControl(_owner) {\\n\\t\\t// verify the inputs\\n\\t\\trequire(_target != address(0), \\\"zero address\\\");\\n\\n\\t\\t// initialize internal contract state\\n\\t\\ttarget = _target;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the access role required to execute the function defined by its signature\\n\\t *      on the target contract\\n\\t *\\n\\t * @dev More on function signatures and selectors: https://docs.soliditylang.org/en/develop/abi-spec.html\\n\\t *\\n\\t * @param signature function signature on the target contract, for example\\n\\t *      \\\"transferOwnership(address)\\\"\\n\\t * @param role role required to execute this function, or zero to disable\\n\\t *      access to the specified function for everyone\\n\\t */\\n\\tfunction updateAccessRole(string memory signature, uint256 role) public {\\n\\t\\t// delegate to `updateAccessRole(bytes4, uint256)`\\n\\t\\tupdateAccessRole(bytes4(keccak256(bytes(signature))), role);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the access role required to execute the function defined by its selector\\n\\t *      on the target contract\\n\\t *\\n\\t * @dev More on function signatures and selectors: https://docs.soliditylang.org/en/develop/abi-spec.html\\n\\t *\\n\\t * @param selector function selector on the target contract, for example\\n\\t *      0xf2fde38b selector corresponds to the \\\"transferOwnership(address)\\\" function\\n\\t * @param role role required to execute this function, or zero to disable\\n\\t *      access to the specified function for everyone\\n\\t */\\n\\tfunction updateAccessRole(bytes4 selector, uint256 role) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_ROLES_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// update the function access role\\n\\t\\taccessRoles[selector] = role;\\n\\n\\t\\t// emit an event\\n\\t\\temit AccessRoleUpdated(selector, role);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Low-level execute of the data calldata on the target contract\\n\\t *\\n\\t * @dev This function extracts the target function selector from the calldata specified\\n\\t *      and verifies transaction executor permission to access the function on the target\\n\\t *      using the `accessRoles` mapping\\n\\t *\\n\\t * @dev Throws if there is no `accessRoles` mapping configured for the function\\n\\t * @dev Throws if transaction executor role doesn't contain the required role from `accessRoles` mapping\\n\\t * @dev Throws if execution on the target returns an error\\n\\t *\\n\\t * @param data low-level calldata to be passed as is to the target contract for the execution\\n\\t * @return the response from the target contract after the successful execution\\n\\t */\\n\\tfunction execute(bytes memory data) public payable returns(bytes memory) {\\n\\t\\t// extract the selector (first 4 bytes as bytes4) using assembly\\n\\t\\tbytes4 selector;\\n\\t\\tassembly {\\n\\t\\t\\t// load the first word after the length field\\n\\t\\t\\tselector := mload(add(data, 32))\\n\\t\\t}\\n\\n\\t\\t// zero data length means we're trying to execute the receive() function on\\n\\t\\t// the target and supply some ether to the target; in this case we don't need a security check\\n\\t\\t// if the data is present, we're executing some real function and must do a security check\\n\\t\\tif(data.length != 0) {\\n\\t\\t\\t// determine the role required to access the function\\n\\t\\t\\tuint256 roleRequired = accessRoles[selector];\\n\\n\\t\\t\\t// verify function access role was already set\\n\\t\\t\\trequire(roleRequired != 0, \\\"access role not set\\\");\\n\\n\\t\\t\\t// verify the access permission\\n\\t\\t\\trequire(isSenderInRole(roleRequired), \\\"access denied\\\");\\n\\t\\t}\\n\\n\\t\\t// execute the call on the target\\n\\t\\t(bool success, bytes memory result) = address(target).call{value: msg.value}(data);\\n\\n\\t\\t// verify the execution completed successfully\\n\\t\\trequire(success, \\\"execution failed\\\");\\n\\n\\t\\t// emit an event\\n\\t\\temit ExecutionComplete(selector, data, result);\\n\\n\\t\\t// return the result\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Proxies the ether sent to the AccessControl Adapter to the target contract\\n\\t *\\n\\t * @dev Throws if target contract doesn't have the default payable receiver, i.e. doesn't accept ether\\n\\t */\\n\\treceive() external payable {\\n\\t\\t// delegate to `execute(bytes)`\\n\\t\\texecute(bytes(\\\"\\\"));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calls the target contract with the calldata specified in the transaction\\n\\t *\\n\\t * @dev See `execute()` function for details\\n\\t * @dev Use `execute()` function directly if the target contract function signature collides\\n\\t *      with any of the AccessControl Adapter functions signature\\n\\t */\\n\\tfallback() external payable {\\n\\t\\t// msg.data contains full calldata: function selector + encoded function arguments (if any)\\n\\t\\t// delegate to `execute(bytes)`\\n\\t\\texecute(msg.data);\\n\\t}\\n}\\n\",\"keccak256\":\"0xbf6b8ccadb2ce5e687e82827ad60c5b8a1ea6ab9ca5afacb258c00faf4dd2875\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dd2806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635020380814610030575b600080fd5b61004361003e3660046101c9565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156100ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cf91906101ed565b6001600160a01b0316146101185760405162461bcd60e51b815260206004820152600c60248201526b3737ba1030b71037bbb732b960a11b604482015260640160405180910390fd5b60008233604051610128906101a4565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561015b573d6000803e3d6000fd5b509050826001600160a01b0316816001600160a01b03167f480c2ac1e89311d31b5f348c0934382be45d3bb75dfe35f2f209652fed1505b360405160405180910390a392915050565b610b928061020b83390190565b6001600160a01b03811681146101c657600080fd5b50565b6000602082840312156101db57600080fd5b81356101e6816101b1565b9392505050565b6000602082840312156101ff57600080fd5b81516101e6816101b156fe608060405234801561001057600080fd5b50604051610b92380380610b9283398101604081905261002f91610121565b8061003d81600019806100ad565b506001600160a01b0382166100875760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055610154565b6001600160a01b0383166000818152602081815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b80516001600160a01b038116811461011c57600080fd5b919050565b6000806040838503121561013457600080fd5b61013d83610105565b915061014b60208401610105565b90509250929050565b610a2f806101636000396000f3fe6080604052600436106100ec5760003560e01c8063725f36261161008a578063d4b8399211610059578063d4b83992146102e7578063d5bb7f671461031f578063f822d5aa1461033f578063fcc2c0781461035f5761010b565b8063725f36261461025f578063ae5b102e1461028f578063ae682e2e146102af578063c688d693146102c75761010b565b806334e48c9e116100c657806334e48c9e146101d157806344276733146101e9578063491d26111461021f5780635defb40d1461023f5761010b565b806309c5eabe1461014b5780630e82fe25146101745780632b521416146101af5761010b565b3661010b576101096040518060200160405280600081525061037f565b005b6101096000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037f92505050565b61015e61015936600461076f565b61037f565b60405161016b9190610810565b60405180910390f35b34801561018057600080fd5b506101a161018f366004610840565b60026020526000908152604090205481565b60405190815260200161016b565b3480156101bb57600080fd5b50306000908152602081905260409020546101a1565b3480156101dd57600080fd5b506101a1600160fd1b81565b3480156101f557600080fd5b506101a1610204366004610872565b6001600160a01b031660009081526020819052604090205490565b34801561022b57600080fd5b5061010961023a36600461088d565b610509565b34801561024b57600080fd5b5061010961025a3660046108b7565b61058b565b34801561026b57600080fd5b5061027f61027a366004610910565b6105a0565b604051901515815260200161016b565b34801561029b57600080fd5b506101096102aa366004610929565b6105c2565b3480156102bb57600080fd5b506101a1600160ff1b81565b3480156102d357600080fd5b5061027f6102e2366004610929565b61061e565b3480156102f357600080fd5b50600154610307906001600160a01b031681565b6040516001600160a01b03909116815260200161016b565b34801561032b57600080fd5b5061010961033a366004610910565b610647565b34801561034b57600080fd5b506101a161035a366004610945565b610654565b34801561036b57600080fd5b5061027f61037a366004610910565b61067f565b60208101518151606091901561041b576001600160e01b03198116600090815260026020526040812054908190036103f45760405162461bcd60e51b81526020600482015260136024820152721858d8d95cdcc81c9bdb19481b9bdd081cd95d606a1b60448201526064015b60405180910390fd5b6103fd8161067f565b6104195760405162461bcd60e51b81526004016103eb90610978565b505b60015460405160009182916001600160a01b0390911690349061043f90889061099f565b60006040518083038185875af1925050503d806000811461047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b606091505b5091509150816104c65760405162461bcd60e51b815260206004820152601060248201526f195e1958dd5d1a5bdb8819985a5b195960821b60448201526064016103eb565b7f57a62eca76fc623c92f161d2a4b851851ece707135ce2af1eec256d660571b6d8386836040516104f9939291906109bb565b60405180910390a1949350505050565b610516600160fd1b61067f565b6105325760405162461bcd60e51b81526004016103eb90610978565b6001600160e01b03198216600081815260026020908152604091829020849055815192835282018390527fdb8ed917742b49e83acd1322bcaa8f18b1e5f78a70784c43ea14db7ab50e628d910160405180910390a15050565b61059c828051906020012082610509565b5050565b306000908152602081905260408120546105bc905b8316831490565b92915050565b6105cf600160ff1b61067f565b6105eb5760405162461bcd60e51b81526004016103eb90610978565b61059c828261061933610613876001600160a01b031660009081526020819052604090205490565b86610654565b61068b565b6001600160a01b038216600090815260208190526040812054610640906105b5565b9392505050565b61065130826105c2565b50565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b60006105bc338361061e565b6001600160a01b0383166000818152602081815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610714576107146106e3565b604051601f8501601f19908116603f0116810190828211818310171561073c5761073c6106e3565b8160405280935085815286868601111561075557600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561078157600080fd5b813567ffffffffffffffff81111561079857600080fd5b8201601f810184136107a957600080fd5b6107b8848235602084016106f9565b949350505050565b60005b838110156107db5781810151838201526020016107c3565b50506000910152565b600081518084526107fc8160208601602086016107c0565b601f01601f19169290920160200192915050565b60208152600061064060208301846107e4565b80356001600160e01b03198116811461083b57600080fd5b919050565b60006020828403121561085257600080fd5b61064082610823565b80356001600160a01b038116811461083b57600080fd5b60006020828403121561088457600080fd5b6106408261085b565b600080604083850312156108a057600080fd5b6108a983610823565b946020939093013593505050565b600080604083850312156108ca57600080fd5b823567ffffffffffffffff8111156108e157600080fd5b8301601f810185136108f257600080fd5b610901858235602084016106f9565b95602094909401359450505050565b60006020828403121561092257600080fd5b5035919050565b6000806040838503121561093c57600080fd5b6108a98361085b565b60008060006060848603121561095a57600080fd5b6109638461085b565b95602085013595506040909401359392505050565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b600082516109b18184602087016107c0565b9190910192915050565b63ffffffff60e01b841681526060602082015260006109dd60608301856107e4565b82810360408401526109ef81856107e4565b969550505050505056fea2646970667358221220299ccaa4a1349ebdda3d33b786bcdfc785617f69bfe78156209634c81486f30f64736f6c63430008150033a2646970667358221220dfafe7db0eec338f1238afc48c957b42ed075e71ad1fe22330cb21864d2b74e564736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80635020380814610030575b600080fd5b61004361003e3660046101c9565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000336001600160a01b0316826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156100ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cf91906101ed565b6001600160a01b0316146101185760405162461bcd60e51b815260206004820152600c60248201526b3737ba1030b71037bbb732b960a11b604482015260640160405180910390fd5b60008233604051610128906101a4565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561015b573d6000803e3d6000fd5b509050826001600160a01b0316816001600160a01b03167f480c2ac1e89311d31b5f348c0934382be45d3bb75dfe35f2f209652fed1505b360405160405180910390a392915050565b610b928061020b83390190565b6001600160a01b03811681146101c657600080fd5b50565b6000602082840312156101db57600080fd5b81356101e6816101b1565b9392505050565b6000602082840312156101ff57600080fd5b81516101e6816101b156fe608060405234801561001057600080fd5b50604051610b92380380610b9283398101604081905261002f91610121565b8061003d81600019806100ad565b506001600160a01b0382166100875760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055610154565b6001600160a01b0383166000818152602081815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b80516001600160a01b038116811461011c57600080fd5b919050565b6000806040838503121561013457600080fd5b61013d83610105565b915061014b60208401610105565b90509250929050565b610a2f806101636000396000f3fe6080604052600436106100ec5760003560e01c8063725f36261161008a578063d4b8399211610059578063d4b83992146102e7578063d5bb7f671461031f578063f822d5aa1461033f578063fcc2c0781461035f5761010b565b8063725f36261461025f578063ae5b102e1461028f578063ae682e2e146102af578063c688d693146102c75761010b565b806334e48c9e116100c657806334e48c9e146101d157806344276733146101e9578063491d26111461021f5780635defb40d1461023f5761010b565b806309c5eabe1461014b5780630e82fe25146101745780632b521416146101af5761010b565b3661010b576101096040518060200160405280600081525061037f565b005b6101096000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037f92505050565b61015e61015936600461076f565b61037f565b60405161016b9190610810565b60405180910390f35b34801561018057600080fd5b506101a161018f366004610840565b60026020526000908152604090205481565b60405190815260200161016b565b3480156101bb57600080fd5b50306000908152602081905260409020546101a1565b3480156101dd57600080fd5b506101a1600160fd1b81565b3480156101f557600080fd5b506101a1610204366004610872565b6001600160a01b031660009081526020819052604090205490565b34801561022b57600080fd5b5061010961023a36600461088d565b610509565b34801561024b57600080fd5b5061010961025a3660046108b7565b61058b565b34801561026b57600080fd5b5061027f61027a366004610910565b6105a0565b604051901515815260200161016b565b34801561029b57600080fd5b506101096102aa366004610929565b6105c2565b3480156102bb57600080fd5b506101a1600160ff1b81565b3480156102d357600080fd5b5061027f6102e2366004610929565b61061e565b3480156102f357600080fd5b50600154610307906001600160a01b031681565b6040516001600160a01b03909116815260200161016b565b34801561032b57600080fd5b5061010961033a366004610910565b610647565b34801561034b57600080fd5b506101a161035a366004610945565b610654565b34801561036b57600080fd5b5061027f61037a366004610910565b61067f565b60208101518151606091901561041b576001600160e01b03198116600090815260026020526040812054908190036103f45760405162461bcd60e51b81526020600482015260136024820152721858d8d95cdcc81c9bdb19481b9bdd081cd95d606a1b60448201526064015b60405180910390fd5b6103fd8161067f565b6104195760405162461bcd60e51b81526004016103eb90610978565b505b60015460405160009182916001600160a01b0390911690349061043f90889061099f565b60006040518083038185875af1925050503d806000811461047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b606091505b5091509150816104c65760405162461bcd60e51b815260206004820152601060248201526f195e1958dd5d1a5bdb8819985a5b195960821b60448201526064016103eb565b7f57a62eca76fc623c92f161d2a4b851851ece707135ce2af1eec256d660571b6d8386836040516104f9939291906109bb565b60405180910390a1949350505050565b610516600160fd1b61067f565b6105325760405162461bcd60e51b81526004016103eb90610978565b6001600160e01b03198216600081815260026020908152604091829020849055815192835282018390527fdb8ed917742b49e83acd1322bcaa8f18b1e5f78a70784c43ea14db7ab50e628d910160405180910390a15050565b61059c828051906020012082610509565b5050565b306000908152602081905260408120546105bc905b8316831490565b92915050565b6105cf600160ff1b61067f565b6105eb5760405162461bcd60e51b81526004016103eb90610978565b61059c828261061933610613876001600160a01b031660009081526020819052604090205490565b86610654565b61068b565b6001600160a01b038216600090815260208190526040812054610640906105b5565b9392505050565b61065130826105c2565b50565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b60006105bc338361061e565b6001600160a01b0383166000818152602081815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610714576107146106e3565b604051601f8501601f19908116603f0116810190828211818310171561073c5761073c6106e3565b8160405280935085815286868601111561075557600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561078157600080fd5b813567ffffffffffffffff81111561079857600080fd5b8201601f810184136107a957600080fd5b6107b8848235602084016106f9565b949350505050565b60005b838110156107db5781810151838201526020016107c3565b50506000910152565b600081518084526107fc8160208601602086016107c0565b601f01601f19169290920160200192915050565b60208152600061064060208301846107e4565b80356001600160e01b03198116811461083b57600080fd5b919050565b60006020828403121561085257600080fd5b61064082610823565b80356001600160a01b038116811461083b57600080fd5b60006020828403121561088457600080fd5b6106408261085b565b600080604083850312156108a057600080fd5b6108a983610823565b946020939093013593505050565b600080604083850312156108ca57600080fd5b823567ffffffffffffffff8111156108e157600080fd5b8301601f810185136108f257600080fd5b610901858235602084016106f9565b95602094909401359450505050565b60006020828403121561092257600080fd5b5035919050565b6000806040838503121561093c57600080fd5b6108a98361085b565b60008060006060848603121561095a57600080fd5b6109638461085b565b95602085013595506040909401359392505050565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b600082516109b18184602087016107c0565b9190910192915050565b63ffffffff60e01b841681526060602082015260006109dd60608301856107e4565b82810360408401526109ef81856107e4565b969550505050505056fea2646970667358221220299ccaa4a1349ebdda3d33b786bcdfc785617f69bfe78156209634c81486f30f64736f6c63430008150033a2646970667358221220dfafe7db0eec338f1238afc48c957b42ed075e71ad1fe22330cb21864d2b74e564736f6c63430008150033",
  "devdoc": {
    "author": "Basil Gorin",
    "events": {
      "NewOwnableToAccessControlAdapterDeployed(address,address)": {
        "details": "Fired in deployNewOwnableToAccessControlAdapter",
        "params": {
          "adapterAddress": "newly deployed OwnableToAccessControlAdapter address",
          "ownableTargetAddress": "OZ Ownable target contract address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "deployNewOwnableToAccessControlAdapter(address)": {
        "params": {
          "targetAddress": "OZ Ownable target address to bind OwnableToAccessControlAdapter to"
        },
        "returns": {
          "_0": "address of the newly deployed OwnableToAccessControlAdapter contract"
        }
      }
    },
    "title": "Adapter Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployNewOwnableToAccessControlAdapter(address)": {
        "notice": "Deploys new OwnableToAccessControlAdapter bound to the OZ Ownable contract specified.      Can be executed only by the OZ Ownable target owner. This owner is expected to transfer      the ownership to the newly deployed OwnableToAccessControlAdapter contract address."
      }
    },
    "notice": "Helper contract simplifying the deployment of the OwnableToAccessControlAdapter",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}